#!/bin/bash

source common

oneTimeSetUp() {
  if [[ ! -d "${OUT_DIR}" ]]; then
    mkdir "${OUT_DIR}"
  fi
}

oneTimeTearDown() {
  if [[ -d "${OUT_DIR}" ]]; then
    rm -rf "${OUT_DIR}"
  fi
}

setUp() {
  source ../loop
}

tearDown() {
  if [[ -d "${OUT_DIR}" ]]; then
    find "${OUT_DIR}" -mindepth 1 -delete
  fi
}

test_main() {
  # given
  set_options() {
    echo "$@" > "${OUT_DIR}/set_options"
  }
  loop_command() {
    touch "${OUT_DIR}/loop_command"
  }
  local expected="1 2 3"

  # when
  main 1 2 3

  # then
  assertFileExists "set_options"
  assertEquals "${expected}" "$(cat "${OUT_DIR}/set_options")"
  assertFileExists "loop_command"
}

test_set_options_help() {
  # given
  mock_validate_options
  mock_print_help

  # when
  local args=("-h")
  $(set_options "${args[@]}")
  local exit_code=$?

  # then
  assertEquals 101 ${exit_code}
  assertFileExists "print_help"
  assertFileDoesNotExist "validate_options"
}

test_set_options_invalid_arg() {
  # given
  mock_validate_options
  mock_print_help

  # when
  local args=("-x")
  $(set_options "${args[@]}")
  local exit_code=$?

  # then
  assertEquals 101 ${exit_code}
  assertFileExists "print_help"
  assertFileDoesNotExist "validate_options"
}

test_set_options() {
  # given
  mock_validate_options

  # when
  local args=("-c" "ls -l" "-t" "20" "-e" "1 2")
  set_options "${args[@]}"
  local exit_codes=$(echo "${EXIT_CODES[@]}")

  # then
  assertEquals "ls -l" "${COMMAND}"
  assertEquals 20 "${TIMEOUT}"
  assertEquals "1 2" "${exit_codes}"

  assertFileExists "validate_options"
}

test_loop_command_succeeds_first_time() {
  # given
  echo 0 > "${MOCK_COMMAND_INPUT}"
  local EXIT_CODES=(0)
  local COMMAND="./mock_command"

  # when
  output=$(loop_command)
  local exit_code=$?

  # then
  assertEquals "success" "${output}"
  assertEquals 0 ${exit_code}
}

test_loop_command_loops_once() {
  # given
  echo 1 > "${MOCK_COMMAND_INPUT}"
  local EXIT_CODES=(0)
  local COMMAND="./mock_command"
  local expected=$(echo "failure"; echo "success")

  # when
  output=$(loop_command)
  local exit_code=$?

  # then
  assertEquals "${expected}" "${output}"
  assertEquals 0 ${exit_code}
}

test_loop_command_exits_at_specified_code() {
  # given
  echo 2 > "${MOCK_COMMAND_INPUT}"
  local EXIT_CODES=(1)
  local COMMAND="./mock_command"
  local expected=$(echo "failure"; echo "failure")

  # when
  output=$(loop_command)
  local exit_code=$?

  # then
  assertEquals "${expected}" "${output}"
  assertEquals 1 ${exit_code}
}

test_loop_command_exits_on_timeout() {
  # given
  local TIMEOUT=1
  local EXIT_CODES=(0)
  local COMMAND="false && echo 'exited'"
  local expected=""

  # when
  output=$(loop_command)
  local exit_code=$?

  # then
  assertEquals "${expected}" "${output}"
  assertEquals 102 ${exit_code}
}

test_exit_code_matches() {
  local EXIT_CODES=(1 2 3)
  for code in 1 2 3; do
    assertEquals 0 $(exit_code_matches ${code})
  done

  for code in 0 4; do
    assertEquals 1 $(exit_code_matches ${code})
  done
}

test_is_timed_out() {
  local timed_out=1
  assertEquals 0 $(is_timed_out ${timed_out})

  local timed_out_2=$(date +%s)
  assertEquals 0 $(is_timed_out ${timed_out_2})

  local not_timed_out=$(($(date +%s) + 10 ))
  assertEquals 1 $(is_timed_out ${not_timed_out})
}

test_validate_options() {
  # given
  exit_on_missing_command() {
    touch "${OUT_DIR}/exit_on_missing_command"
  }
  set_default_timeout() {
    touch "${OUT_DIR}/set_default_timeout"
  }
  set_default_exit_code() {
    touch "${OUT_DIR}/set_default_exit_code"
  }
  prepare_exit_codes() {
    touch "${OUT_DIR}/prepare_exit_codes"
  }
  validate_numeric_params() {
    touch "${OUT_DIR}/validate_numeric_params"
  }

  # when
  validate_options

  # then
  assertFileExists "exit_on_missing_command"
  assertFileExists "set_default_timeout"
  assertFileExists "set_default_exit_code"
  assertFileExists "prepare_exit_codes"
  assertFileExists "validate_numeric_params"
}

test_exit_on_missing_command() {
  # given
  mock_print_help

  # when
  local COMMAND=""
  $(exit_on_missing_command)
  local exit_code=$?

  # then
  assertEquals 101 ${exit_code}
  assertFileExists "print_help"
}

test_exit_on_missing_command_does_not_exit() {
  # given
  mock_print_help

  # when
  local COMMAND="ls -l"
  $(exit_on_missing_command)
  local exit_code=$?

  # given
  assertEquals "0" "${exit_code}"
  assertFileDoesNotExist "print_help"
}

test_set_default_timeout() {
  # given
  local TIMEOUT=""

  # when
  set_default_timeout

  # then
  assertEquals "0" "${TIMEOUT}"
}

test_set_default_timeout_when_already_set() {
  # given
  local TIMEOUT="1"

  # when
  set_default_timeout

  # then
  assertEquals "1" "${TIMEOUT}"
}

test_set_default_exit_code() {
  # given
  local EXIT_CODES=()

  # when
  set_default_exit_code
  local actual=$(echo "${EXIT_CODES[@]}")

  # then
  assertEquals "0" "${actual}"
}

test_set_default_exit_code_when_already_set() {
  # given
  local EXIT_CODES=(1)

  # when
  set_default_exit_code
  local actual=$(echo "${EXIT_CODES[@]}")

  # then
  assertEquals "1" "${actual}"
}

test_prepare_exit_codes_adds_zero() {
  # given
  local EXIT_CODES=()

  # when
  prepare_exit_codes
  local actual=$(echo "${EXIT_CODES[@]}")

  # then
  assertEquals "0" "${actual}"
}

test_prepare_exit_codes_removes_duplicates() {
  # given
  local EXIT_CODES=(0 1 2 1)

  # when
  prepare_exit_codes
  local actual=$(echo "${EXIT_CODES[@]}")

  # then
  assertEquals "0 1 2" "${actual}"
}

test_validate_numeric_params() {
  # given
  local TIMEOUT=1
  local EXIT_CODES=(1 2 3)

  # when
  $(validate_numeric_params)
  local exit_code=$?

  # then
  assertEquals 0 ${exit_code}
}

test_validate_numeric_params_invalid_timeout() {
  # given
  local TIMEOUT="invalid"

  # when
  output=$(validate_numeric_params)
  local exit_code=$?

  #then
  assertContains "${output}" "Invalid value 'invalid' for timeout."
  assertContains "${output}" "looper: exiting"
  assertNotContains "${output}" "for exit code."
  assertEquals 101 ${exit_code}
}

test_validate_numeric_params_invalid_exit_codes() {
  # given
  local TIMEOUT=1
  local EXIT_CODES=(1 x 3)

  # when
  output=$(validate_numeric_params)
  local exit_code=$?

  # then
  assertContains "${output}" "Invalid value 'x' for exit code."
  assertContains "${output}" "looper: exiting"
  assertNotContains "${output}" "for timeout."
  assertEquals 101 ${exit_code}
}

test_is_number() {
  for num in 0 1 11 10 404; do
    local message="expected ${num} to be a number, but it was not"
    assertTrue "${message}" "is_number ${num}"
  done

  for not_num in .2 0.5 01 -1 1,5 a abc "''"; do
    local message="expected ${not_num} not to be a number, but it was"
    assertFalse "${message}" "is_number ${not_num}"
  done
}

mock_validate_options() {
  validate_options() {
    touch "${OUT_DIR}/validate_options"
  }
}

mock_print_help() {
  print_help() {
    touch "${OUT_DIR}/print_help"
  }
}

# Assert that the specified file is present
# in the OUT_DIR directory
assertFileExists() {
  local filename="$1"
  local message="expected file '${filename}' to exist, but it does not"
  assertTrue "${message}" "[ -e ${OUT_DIR}/${filename} ]"
}

# Assert that the specified file is not present
# in the OUT_DIR directory
assertFileDoesNotExist() {
  local filename="$1"
  local message="expected file '${filename}' to not exist, but it does"
  assertTrue "${message}" "[ ! -e ${OUT_DIR}/${filename} ]"
}

source shunit2
