#!/bin/bash
# shellcheck disable=SC2155

COMMAND=""
EXIT_CODES=()
TIMEOUT=""
SLEEP=""
PATTERN=""
PATTERN_TYPE=""
IGNORE_CASE=""
INVERT_MATCH=""

print_help() {
cat << HELP
  Loop the specified command until it exits with one of the specified exit codes
  or a pattern is matched in its output.

  Usage: loop <-c command> [options]

  Common options:
    -h            Show this help message.
    -s SECONDS    Set the sleep duration to make the script wait
                  before executing the command again.
    -t SECONDS    Set the timeout after which the loop stops executing the command.
                  Setting it to '0' has the same effect as not setting it.

  Exit code options:
    -e CODE...    A space-separated list of exit codes which
                  make the loop stop if one of them matches.
                  The exit code '0' is implicitly included.
                  This option has no effect if a pattern is specified.

  Pattern matching options:
    -g PATTERN    Enable pattern matching with the specified pattern.
                  The command will be looped UNTIL the pattern matches.
    -i            Ignore case distinctions.
    -v            Invert pattern matching.
                  The command will be looped WHILE the pattern matches.
    -E            Interpret PATTERN as an extended regular expression.
    -F            Interpret PATTERN as a fixed string.
    -G            Interpret PATTERN as a basic regular expression.
                  This is the default.

  Examples:
    loop -c "curl https://www.google.com"             -- call curl until it exits with 0.
    loop -c "wget https://www.google.com" -e "4 5 6"  -- call wget until it exits with 0, 4, 5 or 6.
    loop -c "traceroute google.com" -s 3              -- call traceroute until it exits with 0,
                                                         "sleeping" 3 seconds between each call.
    loop -c "ping https://www.google.com" -t 20 -e 1  -- call ping until it exits with 0 or 1,
                                                         or 20 seconds has passed.
    loop -c "./script.sh" -g ok -i                    -- call script.sh until its output
                                                         contains "ok" case-insensitively.
    loop -c "./script.sh" -g "^a.*z$" -E -v           -- call script.sh while its output contains
                                                         a line that matches the regexp.

  Exit codes:
    in normal cases, loop exits with the exit code returned by the specified command.
    (except when looping is pattern-based)
    However, there are some special exit codes returned by loop:
      101 – loop was called with an invalid option or with the -h option
      102 – a timeout occurred
      103 – the pattern was found/not found in the output (depending on the -v option)
      104 – the grep command failed with an error (e.g. invalid file)
HELP
}

main() {
  set_options "$@"
  if [[ -z "${PATTERN}" ]]; then
    loop_command
  else
    loop_command_with_pattern
  fi
}

set_options() {
  while getopts ':c:t:e:s:g:ivEFGh' opt; do
    case ${opt} in
      c) COMMAND="${OPTARG}" ;;
      t) TIMEOUT="${OPTARG}" ;;
      e) EXIT_CODES=("${OPTARG}") ;;
      s) SLEEP="${OPTARG}" ;;
      g) PATTERN="${OPTARG}" ;;
      E|F|G) local index=$((OPTIND-1)); PATTERN_TYPE="${!index}" ;;
      i) IGNORE_CASE=0 ;;
      v) INVERT_MATCH=0 ;;
      h) print_help && exit 101 ;;
      \?|*) print_help && exit 101 ;;
    esac
  done

  validate_options
}

loop_command() {
  local finished=1
  local exit_code=0
  local timed_out=1
  local deadline=$(($(date +%s) + TIMEOUT))

  until [[ ${timed_out} -eq 0 || ${finished} -eq 0 ]]; do
    ${BASH} -c "${COMMAND}"
    exit_code=$?
    sleep "${SLEEP}"
    finished=$(exit_code_matches ${exit_code})
    timed_out=$(get_timed_out_value ${deadline})
  done

  if [[ ${timed_out} -eq 0 ]]; then
    exit 102
  else
    exit ${exit_code}
  fi
}

exit_code_matches() {
  local code="$1"
  if [[ ${EXIT_CODES[*]} =~ ${code} ]]; then
    echo 0
  else
    echo 1
  fi
}

loop_command_with_pattern() {
  local finished=1
  local timed_out=1
  local deadline=$(($(date +%s) + TIMEOUT))
  local output_file=""

  until [[ ${timed_out} -eq 0 || ${finished} -eq 0 || ${finished} -eq 2 ]]; do
    output_file=$(mktemp)
    ${BASH} -c "${COMMAND} | tee ${output_file}"
    sleep "${SLEEP}"
    finished=$(search_in_output "${output_file}")
    timed_out=$(get_timed_out_value ${deadline})
  done

  if [[ ${timed_out} -eq 0 ]]; then
    exit 102
  elif [[ ${finished} -eq 0 ]]; then
    exit 103
  elif [[ ${finished} -eq 2 ]]; then
    exit 104
  fi
}

search_in_output() {
  local output_file="$1"
  local grep_command=$(assemble_grep_command "${output_file}")
  ${BASH} -c "${grep_command}"
  echo $?
}

assemble_grep_command() {
  local filename="$1"
  local grep_command="grep -q -s ${PATTERN_TYPE} -e \"${PATTERN}\""

  if [[ -n ${IGNORE_CASE} ]]; then
    grep_command="${grep_command} -i"
  fi

  if [[ -n ${INVERT_MATCH} ]]; then
    grep_command="! ${grep_command}"
  fi

  echo "${grep_command} ${filename}"
}

get_timed_out_value() {
  local deadline="$1"
  if [[ ${TIMEOUT} -ne 0 ]]; then
    is_timed_out "${deadline}"
  else
    echo 1
  fi
}

is_timed_out() {
  local timed_out_time="$1"
  local current_time=$(date +%s)
  if [[ ${timed_out_time} -le ${current_time} ]]; then
    echo 0
  else
    echo 1
  fi
}

validate_options() {
  exit_on_missing_command
  set_default_timeout
  set_default_exit_code
  set_default_sleep
  set_default_pattern_type
  prepare_exit_codes
  validate_numeric_params
}

exit_on_missing_command() {
  if [[ -z "${COMMAND}" ]]; then
    print_help
    exit 101
  fi
}

set_default_timeout() {
  if [[ -z "${TIMEOUT}" ]]; then
    TIMEOUT=0
  fi
}

set_default_exit_code() {
  if [[ -z "${EXIT_CODES[*]}" ]]; then
    EXIT_CODES=(0)
  fi
}

set_default_sleep() {
  if [[ -z "${SLEEP}" ]]; then
    SLEEP=0
  fi
}

set_default_pattern_type() {
  if [[ -z "${PATTERN_TYPE}" ]]; then
    PATTERN_TYPE="-G"
  fi
}

prepare_exit_codes() {
  EXIT_CODES+=(0)
  mapfile -t EXIT_CODES < <(printf "%s\n" "${EXIT_CODES[@]}" | sort -u)
}

validate_numeric_params() {
  if ! is_number "${TIMEOUT}"; then
    echo "looper: Invalid value '${TIMEOUT}' for timeout."
    echo "looper: exiting"
    exit 101
  fi

  if ! is_number "${SLEEP}"; then
    echo "looper: Invalid value '${SLEEP}' for sleep."
    echo "looper: exiting"
    exit 101
  fi

  for elem in "${EXIT_CODES[@]}"; do
    if ! is_number "${elem}"; then
      echo "looper: Invalid value '${elem}' for exit code."
      echo "looper: exiting"
      exit 101
    fi
  done
}

is_number() {
  re='^(0|[1-9]+[0-9]*){1}$'
  if [[ $1 =~ $re ]]; then
    return 0
  else
    return 1
  fi
}

if [[ "${#BASH_SOURCE[@]}" -eq 1 ]]; then
    main "$@"
fi



